// StateRequest messages are processed by retrieving events and snapshots from the
// database, and computing the current state by starting from the newest shapshot
// and applying any newer events. If more than a few events are applied, then a new 
// snapshot is created
namespace app.events {
    using app.interface
    using app.persistence

    network eventSource {
        process eventSource {
            accept StateRequest stateRequest {
                emit GetLastSnapshot {
                    message {
                        entityKey stateRequest.entityKey
                        timestamp stateRequest.pointInTime
                    }
                }
                
                emit GetGraph

                await { 
                    Snapshot snapshot
                    NotFound notFound
                }

                await Graph graph

                var stateCode graph.startingStateCode
                var timestamp Date.zero
                
                if snapshot {
                    set stateCode snapshot.stateCode
                    set timestamp snapshot.timestamp
                }

                emit GetEventHistory {
                    message {
                        entityKey stateRequest.entityKey
                        startTimestamp timestamp
                        endTimestamp stateRequest.pointInTime
                    }
                }

                await EventHistory eventHistory

                for event of eventHistory.events {
                    const state graph.states[stateCode]
                    for transition of state.transitions {
                        if transition.eventCode == event.eventCode {
                            set stateCode transition.nextStateCode
                            break
                        }
                    }
                }

                if eventHistory.events.length() > 5 {
                    const snapshot Snapshot {
                        message {
                            entityKey stateRequest.entityKey
                            timestamp timestamp
                            stateCode stateCode
                        }
                    }
                    emit PersistSnapshot message snapshot snapshot
                }

                const stateName graph.states[stateCode].stateName
                emit StateResponse {
                    message {
                        entityKey stateRequest.entityKey
                        timestamp timestamp
                        stateCode stateCode
                        stateName stateName
                    }
                }
            }
        }
    }
}
