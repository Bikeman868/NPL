import { ITokenStream } from '#interfaces/ITokenStream.js';
import { AcceptModel } from '#model/AcceptModel.js';
import { AcceptStatementModel } from '#model/AcceptStatementModel.js';
import { AppendStatementModel } from '#model/AppendStatementModel.js';
import { ApplicationModel } from '#model/ApplicationModel.js';
import { CaptureStatementModel } from '#model/CaptureStatementModel.js';
import { ClearStatementModel } from '#model/ClearStatementModel.js';
import { ConfigFieldModel } from '#model/ConfigFieldModel.js';
import { ConfigModel } from '#model/ConfigModel.js';
import { ConnectionEgressModel } from '#model/ConnectionEgressModel.js';
import { ConnectionIngressModel } from '#model/ConnectionIngressModel.js';
import { ConnectionModel } from '#model/ConnectionModel.js';
import { ConstModel } from '#model/ConstModel.js';
import { ElseifStatementModel } from '#model/ElseifStatementModel.js';
import { ElseStatementModel } from '#model/ElseStatementModel.js';
import { EmitStatementModel } from '#model/EmitStatementModel.js';
import { EnumModel } from '#model/EnumModel.js';
import { EnumValueModel } from '#model/EnumValueModel.js';
import { ExpectStatementModel } from '#model/ExpectStatementModel.js';
import { ForStatementModel } from '#model/ForStatementModel.js';
import { IfStatementModel } from '#model/IfStatementModel.js';
import { MessageDestinationModel } from '#model/MessageDestinationModel.js';
import { MessageFieldDefinitionModel } from '#model/MessageFieldDefinitionModel.js';
import { MessageTypeModel } from '#model/MessageTypeModel.js';
import { NamespaceModel } from '#model/NamespaceModel.js';
import { NetworkEgressModel } from '#model/NetworkEgressModel.js';
import { NetworkIngressModel } from '#model/NetworkIngressModel.js';
import { NetworkModel } from '#model/NetworkModel.js';
import { PipeModel } from '#model/PipeModel.js';
import { PipeRouteModel } from '#model/PipeRouteModel.js';
import { PrependStatementModel } from '#model/PrependStatementModel.js';
import { ProcessModel } from '#model/ProcessModel.js';
import { RemoveStatementModel } from '#model/RemoveStatementModel.js';
import { RouteStatementModel } from '#model/RouteStatementModel.js';
import { RoutingStatementModel } from '#model/RoutingStatementModel.js';
import { SetStatementModel } from '#model/SetStatementModel.js';
import { SourceFileModel } from '#model/SourceFileModel.js';
import { TestModel } from '#model/TestModel.js';
import { TestStatementModel } from '#model/TestStatementModel.js';
import { UsingModel } from '#model/UsingModel.js';
import { VarStatementModel } from '#model/VarStatementModel.js';
import { WhileStatementModel } from '#model/WhileStatementModel.js';

export interface IModelFactory {
    config: {
        mergeSourceFiles: boolean;
        mergeNamespaces: boolean;
        mergeNetworks: boolean;
        mergeApplications: boolean;
    };

    buildAcceptModel(tokens: ITokenStream): AcceptModel;
    buildAcceptStatementModel(tokens: ITokenStream): AcceptStatementModel;
    buildAppendStatementModel(tokens: ITokenStream): AppendStatementModel;
    buildApplicationModel(tokens: ITokenStream): ApplicationModel;
    buildCaptureStatementModel(tokens: ITokenStream): CaptureStatementModel;
    buildClearStatementModel(tokens: ITokenStream): ClearStatementModel;
    buildConfigModel(tokens: ITokenStream): ConfigModel;
    buildConnectionModel(tokens: ITokenStream): ConnectionModel;
    buildConstModel(tokens: ITokenStream): ConstModel;
    buildElseifStatementModel(tokens: ITokenStream): ElseifStatementModel;
    buildElseStatementModel(tokens: ITokenStream): ElseStatementModel;
    buildEmitStatementModel(tokens: ITokenStream): EmitStatementModel;
    buildEnumModel(tokens: ITokenStream): EnumModel;
    buildExpectStatementModel(tokens: ITokenStream): ExpectStatementModel;
    buildForStatementModel(tokens: ITokenStream): ForStatementModel;
    buildIfStatementModel(tokens: ITokenStream): IfStatementModel;
    buildMessageTypeModel(tokens: ITokenStream): MessageTypeModel;
    buildNamespaceModel(tokens: ITokenStream): NamespaceModel;
    buildNetworkModel(tokens: ITokenStream): NetworkModel;
    buildPipeModel(tokens: ITokenStream): PipeModel;
    buildPipeRouteModel(tokens: ITokenStream): PipeRouteModel;
    buildProcessModel(tokens: ITokenStream): ProcessModel;
    buildRemoveStatementModel(tokens: ITokenStream): RemoveStatementModel;
    buildRouteStatementModel(tokens: ITokenStream): RouteStatementModel;
    buildRoutingStatementModel(tokens: ITokenStream): RoutingStatementModel;
    buildSetStatementModel(tokens: ITokenStream): SetStatementModel;
    buildSourceFileModel(tokens: ITokenStream): SourceFileModel;
    buildTestModel(tokens: ITokenStream): TestModel;
    buildTestStatementModel(tokens: ITokenStream): TestStatementModel;
    buildUsingModel(tokens: ITokenStream): UsingModel;
    buildVarStatementModel(tokens: ITokenStream): VarStatementModel;
    buildWhileStatementModel(tokens: ITokenStream): WhileStatementModel;

    emptyAcceptModel(): AcceptModel;
    emptyAcceptStatementModel(): AcceptStatementModel;
    emptyAppendStatementModel(): AppendStatementModel;
    emptyApplicationModel(): ApplicationModel;
    emptyCaptureStatementModel(): CaptureStatementModel;
    emptyClearStatementModel(): ClearStatementModel;
    emptyConfigFieldModel(): ConfigFieldModel;
    emptyConfigModel(): ConfigModel;
    emptyConnectionEgressModel(): ConnectionEgressModel;
    emptyConnectionIngressModel(): ConnectionIngressModel;
    emptyConnectionModel(): ConnectionModel;
    emptyConstModel(): ConstModel;
    emptyElseifStatementModel(): ElseifStatementModel;
    emptyElseStatementModel(): ElseStatementModel;
    emptyEmitStatementModel(): EmitStatementModel;
    emptyEnumModel(): EnumModel;
    emptyEnumValueModel(): EnumValueModel;
    emptyExpectStatementModel(): ExpectStatementModel;
    emptyForStatementModel(): ForStatementModel;
    emptyIfStatementModel(): IfStatementModel;
    emptyMessageDestinationModel(): MessageDestinationModel;
    emptyMessageFieldDefinitionModel(): MessageFieldDefinitionModel;
    emptyMessageTypeModel(): MessageTypeModel;
    emptyNamespaceModel(): NamespaceModel;
    emptyNetworkEgressModel(): NetworkEgressModel;
    emptyNetworkIngressModel(): NetworkIngressModel;
    emptyNetworkModel(): NetworkModel;
    emptyPipeModel(): PipeModel;
    emptyPipeRouteModel(): PipeRouteModel;
    emptyPrependStatementModel(): PrependStatementModel;
    emptyProcessModel(): ProcessModel;
    emptyRemoveStatementModel(): RemoveStatementModel;
    emptyRouteStatementModel(): RouteStatementModel;
    emptyRoutingStatementModel(): RoutingStatementModel;
    emptySetStatementModel(): SetStatementModel;
    emptySourceFileModel(): SourceFileModel;
    emptyTestModel(): TestModel;
    emptyTestStatementModel(): TestStatementModel;
    emptyUsingModel(): UsingModel;
    emptyVarStatementModel(): VarStatementModel;
    emptyWhileStatementModel(): WhileStatementModel;

    mergeIntoApplication(dest: ApplicationModel, src: ApplicationModel): void;
    mergeIntoNamespace(dest: NamespaceModel, src: NamespaceModel): void;
    mergeIntoNetwork(dest: NetworkModel, src: NetworkModel): void;
    mergeIntoSourceFile(dest: SourceFileModel, src: SourceFileModel): void;

    addApplication(applications: ApplicationModel[], application: ApplicationModel): void;
    addNamespace(namespaces: NamespaceModel[], namespace: NamespaceModel): void;
    addNetwork(networks: NetworkModel[], network: NetworkModel): void;
}
